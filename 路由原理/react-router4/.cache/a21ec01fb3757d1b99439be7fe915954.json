{"dependencies":[{"name":"react","loc":{"line":1,"column":31}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.jsHistory = exports.Route = exports.Link = undefined;\nvar _jsxFileName = \"/Users/lxq/github/react/\\u8DEF\\u7531\\u539F\\u7406/react-router4/mini-react-router-dom.js\";\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar instances = []; // 用来存储页面中的 Router\nvar register = function register(comp) {\n  return instances.push(comp);\n};\nvar unRegister = function unRegister(comp) {\n  return instances.splice(instances.indexOf(comp), 1);\n};\nvar historyPush = function historyPush(path) {\n  window.history.pushState({}, null, path); // 改变路由\n  instances.forEach(function (instance) {\n    return instance.forceUpdate();\n  }); // 循环路由，更新每个路由\n};\nwindow.addEventListener('popstate', function () {\n  // 只要点击浏览器前进后退按钮就会触发事件\n  // 遍历所有 Route，强制重新渲染所有 Route\n  instances.forEach(function (instance) {\n    return instance.forceUpdate();\n  });\n});\n\n// 判断 Route 的 path 参数与当前 url 是否匹配\nvar matchPath = function matchPath(pathname, options) {\n  var path = options.path,\n      _options$exact = options.exact,\n      exact = _options$exact === undefined ? false : _options$exact;\n\n  var match = new RegExp(\"^\" + path).exec(pathname);\n  if (!match) return null;\n  var url = match[0];\n  var isExact = pathname === url; // / /page\n  if (exact && !isExact) return null;\n  return {\n    path: path,\n    url: url\n  };\n};\n\nvar Link = exports.Link = function (_Component) {\n  _inherits(Link, _Component);\n\n  function Link() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Link);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Link.__proto__ || Object.getPrototypeOf(Link)).call.apply(_ref, [this].concat(args))), _this), _this.handleClick = function (event) {\n      event.preventDefault();\n      var to = _this.props.to;\n\n      historyPush(to);\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(Link, [{\n    key: \"render\",\n    value: function render() {\n      var _props = this.props,\n          to = _props.to,\n          children = _props.children;\n\n      return _react2.default.createElement(\n        \"a\",\n        { href: to, onClick: this.handleClick, __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          },\n          __self: this\n        },\n        children\n      );\n    }\n  }]);\n\n  return Link;\n}(_react.Component);\n\nvar Route = exports.Route = function (_Component2) {\n  _inherits(Route, _Component2);\n\n  function Route() {\n    _classCallCheck(this, Route);\n\n    return _possibleConstructorReturn(this, (Route.__proto__ || Object.getPrototypeOf(Route)).apply(this, arguments));\n  }\n\n  _createClass(Route, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      register(this);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props2 = this.props,\n          path = _props2.path,\n          component = _props2.component,\n          exact = _props2.exact;\n\n      var match = matchPath(window.location.pathname, { path: path, exact: exact });\n\n      // Route 跟当前 url 不匹配，就返回 null\n      if (!match) return null;\n\n      if (component) {\n        return _react2.default.createElement(component);\n      }\n    }\n  }, {\n    key: \"componentWillUnMount\",\n    value: function componentWillUnMount() {\n      unRegister(this);\n    }\n  }]);\n\n  return Route;\n}(_react.Component);\n// 这里之所以要导出一个 jsHistory，\n// 是为了方便使用者在 JS 中直接控制导航\n\n\nvar jsHistory = exports.jsHistory = {\n  pushState: historyPush\n};\n/**\n * https://github.com/youngwind/blog/issues/109\n * history.pushState\n * history.pushState({},null,'/2.html')\n * 添加上面这个新记录后，浏览器地址栏立刻显示..../2.html\n * 但并不会跳转到2.html，甚至也不会检查2.html是否存在，它只是成为浏览历史中的最新记录。\n * 假定这时你访问了google.com，然后点击了倒退按钮，页面的url将显示2.html，但是内容还是原来的1.html。你再点击一次倒退按钮，url将显示1.html，内容不变。\n * 总之，pushState方法不会触发页面刷新，只是导致history对象发生变化，地址栏会有反应。\n * 如果pushState的url参数，设置了一个新的锚点值（即hash），并不会触发hashchange事件。如果设置了一个跨域网址，则会报错。\n * history.pushState(null, null, 'https://twitter.com/hello');\n * 仅仅调用pushState方法或replaceState方法 ，并不会触发popstate事件\n * 只有用户点击浏览器倒退按钮和前进按钮，或者使用JavaScript调用back、forward、go方法时才会触发。\n */\n\n/**\n * exact\n * exact是Route下的一条属性，一般而言，react路由会匹配所有匹配到的路由组价，exact能够使得路由的匹配更严格一些。\n * exact的值为bool型，为true是表示严格匹配，为false时为正常匹配。\n * 如在exact为true时，’/link’与’/’是不匹配的，但是在false的情况下它们又是匹配的。\n * <Route path='/' component={Home} />\n * <Route path='/page' component={Page}>\n * //这种情况下，如果匹配路由path='/page'，那么会把Home也会展示出来。\n * 所以我们经常添加exact来解决上述问题。\n * <Route exact path='/' component={Home} />\n * <Route path='/page' component={Page} />\n */\n\n/**\n * #\n * http://www.ruanyifeng.com/blog/2011/03/url_hash.html\n * \n */"},"hash":"8f04d02d6efabe3a2dd76d99db773233"}